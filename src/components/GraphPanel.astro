---
import ChartWrapper from "./react/ChartWrapper.jsx";

type ActivityEvent = {
  event: string;
  orderType: string;
  price: string;
  timestamp: number;
};

type DayStats = {
  date: string;
  timestamp: number;
  floor: number;
  avg: number;
  vol: number;
  count: number;
};

const res = await fetch("https://api.modularium.art/collection/0xbE25A97896b9CE164a314C70520A4df55979a0c6/activity");
if (!res.ok) throw new Error(`Activity fetch failed: ${res.status}`);
const events = (await res.json()) as ActivityEvent[];

const filtered = events.filter((e) => e.event === "TAKE" && e.orderType === "SELL");

const buckets: Record<string, ActivityEvent[]> = {};
for (const e of filtered) {
  const date = new Date(e.timestamp * 1000).toISOString().split("T")[0];
  if (!buckets[date]) buckets[date] = [];
  buckets[date].push(e);
}

const allData: DayStats[] = Object.entries(buckets).map(([date, txs]) => {
  const prices = txs.map((t) => Number(t.price) / 1e18);
  const floor = Math.min(...prices);
  const avg = prices.reduce((a, b) => a + b, 0) / prices.length;
  const vol = prices.reduce((a, b) => a + b, 0);
  const count = prices.length;
  const timestamp = txs[0].timestamp * 1000;
  return { date, timestamp, floor, avg, vol, count };
});
---

<ChartWrapper client:load data={allData} />
